package main

import (
	"text/template"

	"github.com/ronbb/cloud/servers/models"
	"github.com/ronbb/cloud/utils/casing"
	"google.golang.org/protobuf/compiler/protogen"
	"google.golang.org/protobuf/proto"
)

func ServerOptions(service *protogen.Service) *models.ServerOptions {
	options, ok := proto.GetExtension(service.Desc.Options(), models.E_Server).(*models.ServerOptions)
	if ok && options != nil {
		return options
	} else {
		return &models.ServerOptions{
			Name: casing.Snake(service.GoName),
		}
	}
}

func MethodOptions(method *protogen.Method) *models.RouteOptions {
	options, ok := proto.GetExtension(method.Desc.Options(), models.E_Route).(*models.RouteOptions)
	if ok && options != nil {
		return options
	} else {
		return &models.RouteOptions{
			Method: "post",
			Url:    "/" + casing.Snake(method.GoName),
		}
	}
}

var fileTemplate *template.Template

var fileTemplateText = `
// Code generated by protoc-gen-grpc-gateway. DO NOT EDIT.
// source: {{.Proto.Name}}

package {{.GoPackageName}}

{{range .Services}}
{{$server := ServerOptions .}}

var {{.GoName}}HttpServerDescriptor = &HttpServerDescriptor{
	Name: "{{$server.Name}}",
	Routes: []*RouteDescriptor{
		{{range .Methods}}
		{{$method := MethodOptions .}}
		{
			GrpcMethod: "{{.GoName}}",
			Url: "{{$method.Url}}",
			Method: "{{$method.Method}}",
			IsWebSocket: {{if or .Desc.IsStreamingClient .Desc.IsStreamingServer}}true{{else}}false{{end}},
		},
		{{end}}
	},
}
{{end}}

`

func init() {
	fileTemplate = template.Must(
		template.New("file").Funcs(template.FuncMap{
			"ServerOptions": ServerOptions,
			"MethodOptions": MethodOptions,
		}).Parse(fileTemplateText),
	)
}
