// Authentication

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.12.4
// source: test.proto

package models

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// test
type TestAllType_Enum int32

const (
	// test
	TestAllType_ENUM_UNSPECIFIED TestAllType_Enum = 0
	// test
	TestAllType_ENUM_1 TestAllType_Enum = 1
	// test
	TestAllType_ENUM_2 TestAllType_Enum = 2
)

// Enum value maps for TestAllType_Enum.
var (
	TestAllType_Enum_name = map[int32]string{
		0: "ENUM_UNSPECIFIED",
		1: "ENUM_1",
		2: "ENUM_2",
	}
	TestAllType_Enum_value = map[string]int32{
		"ENUM_UNSPECIFIED": 0,
		"ENUM_1":           1,
		"ENUM_2":           2,
	}
)

func (x TestAllType_Enum) Enum() *TestAllType_Enum {
	p := new(TestAllType_Enum)
	*p = x
	return p
}

func (x TestAllType_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TestAllType_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_test_proto_enumTypes[0].Descriptor()
}

func (TestAllType_Enum) Type() protoreflect.EnumType {
	return &file_test_proto_enumTypes[0]
}

func (x TestAllType_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TestAllType_Enum.Descriptor instead.
func (TestAllType_Enum) EnumDescriptor() ([]byte, []int) {
	return file_test_proto_rawDescGZIP(), []int{0, 0}
}

// test
type TestAllType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// test
	Bool bool `protobuf:"varint,1,opt,name=bool,proto3" json:"bool,omitempty"`
	// test
	Bytes []byte `protobuf:"bytes,2,opt,name=bytes,proto3" json:"bytes,omitempty"`
	// test
	Double float64 `protobuf:"fixed64,3,opt,name=double,proto3" json:"double,omitempty"`
	// test
	Fixed32 uint32 `protobuf:"fixed32,4,opt,name=fixed32,proto3" json:"fixed32,omitempty"`
	// test
	Fixed64 uint64 `protobuf:"fixed64,5,opt,name=fixed64,proto3" json:"fixed64,omitempty"`
	// test
	Float float32 `protobuf:"fixed32,6,opt,name=float,proto3" json:"float,omitempty"`
	// test
	Int32 int32 `protobuf:"varint,7,opt,name=int32,proto3" json:"int32,omitempty"`
	// test
	Int64 int64 `protobuf:"varint,8,opt,name=int64,proto3" json:"int64,omitempty"`
	// test
	MapBoolString map[bool]string `protobuf:"bytes,9,rep,name=map_bool_string,json=mapBoolString,proto3" json:"map_bool_string,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// test
	Sint32 int32 `protobuf:"zigzag32,10,opt,name=sint32,proto3" json:"sint32,omitempty"`
	// test
	Sint64 int64 `protobuf:"zigzag64,11,opt,name=sint64,proto3" json:"sint64,omitempty"`
	// test
	Sfixed32 int32 `protobuf:"fixed32,12,opt,name=sfixed32,proto3" json:"sfixed32,omitempty"`
	// test
	Sfixed64 int64 `protobuf:"fixed64,13,opt,name=sfixed64,proto3" json:"sfixed64,omitempty"`
	// test
	String_ string `protobuf:"bytes,14,opt,name=string,proto3" json:"string,omitempty"`
	// test
	Uint32 uint32 `protobuf:"varint,15,opt,name=uint32,proto3" json:"uint32,omitempty"`
	// test
	Uint64 uint64 `protobuf:"varint,16,opt,name=uint64,proto3" json:"uint64,omitempty"`
	// test
	RepeatedDoubles []float64 `protobuf:"fixed64,17,rep,packed,name=repeated_doubles,json=repeatedDoubles,proto3" json:"repeated_doubles,omitempty"`
	// test
	Message *TestAllType_Message `protobuf:"bytes,18,opt,name=message,proto3" json:"message,omitempty"`
	// test
	Enum TestAllType_Enum `protobuf:"varint,19,opt,name=enum,proto3,enum=TestAllType_Enum" json:"enum,omitempty"`
	// test
	//
	// Types that are assignable to OneofValue:
	//	*TestAllType_OneofInt32
	//	*TestAllType_OneofInt64
	//	*TestAllType_OneofString
	OneofValue isTestAllType_OneofValue `protobuf_oneof:"oneof_value"`
}

func (x *TestAllType) Reset() {
	*x = TestAllType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_test_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestAllType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestAllType) ProtoMessage() {}

func (x *TestAllType) ProtoReflect() protoreflect.Message {
	mi := &file_test_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestAllType.ProtoReflect.Descriptor instead.
func (*TestAllType) Descriptor() ([]byte, []int) {
	return file_test_proto_rawDescGZIP(), []int{0}
}

func (x *TestAllType) GetBool() bool {
	if x != nil {
		return x.Bool
	}
	return false
}

func (x *TestAllType) GetBytes() []byte {
	if x != nil {
		return x.Bytes
	}
	return nil
}

func (x *TestAllType) GetDouble() float64 {
	if x != nil {
		return x.Double
	}
	return 0
}

func (x *TestAllType) GetFixed32() uint32 {
	if x != nil {
		return x.Fixed32
	}
	return 0
}

func (x *TestAllType) GetFixed64() uint64 {
	if x != nil {
		return x.Fixed64
	}
	return 0
}

func (x *TestAllType) GetFloat() float32 {
	if x != nil {
		return x.Float
	}
	return 0
}

func (x *TestAllType) GetInt32() int32 {
	if x != nil {
		return x.Int32
	}
	return 0
}

func (x *TestAllType) GetInt64() int64 {
	if x != nil {
		return x.Int64
	}
	return 0
}

func (x *TestAllType) GetMapBoolString() map[bool]string {
	if x != nil {
		return x.MapBoolString
	}
	return nil
}

func (x *TestAllType) GetSint32() int32 {
	if x != nil {
		return x.Sint32
	}
	return 0
}

func (x *TestAllType) GetSint64() int64 {
	if x != nil {
		return x.Sint64
	}
	return 0
}

func (x *TestAllType) GetSfixed32() int32 {
	if x != nil {
		return x.Sfixed32
	}
	return 0
}

func (x *TestAllType) GetSfixed64() int64 {
	if x != nil {
		return x.Sfixed64
	}
	return 0
}

func (x *TestAllType) GetString_() string {
	if x != nil {
		return x.String_
	}
	return ""
}

func (x *TestAllType) GetUint32() uint32 {
	if x != nil {
		return x.Uint32
	}
	return 0
}

func (x *TestAllType) GetUint64() uint64 {
	if x != nil {
		return x.Uint64
	}
	return 0
}

func (x *TestAllType) GetRepeatedDoubles() []float64 {
	if x != nil {
		return x.RepeatedDoubles
	}
	return nil
}

func (x *TestAllType) GetMessage() *TestAllType_Message {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *TestAllType) GetEnum() TestAllType_Enum {
	if x != nil {
		return x.Enum
	}
	return TestAllType_ENUM_UNSPECIFIED
}

func (m *TestAllType) GetOneofValue() isTestAllType_OneofValue {
	if m != nil {
		return m.OneofValue
	}
	return nil
}

func (x *TestAllType) GetOneofInt32() int32 {
	if x, ok := x.GetOneofValue().(*TestAllType_OneofInt32); ok {
		return x.OneofInt32
	}
	return 0
}

func (x *TestAllType) GetOneofInt64() int64 {
	if x, ok := x.GetOneofValue().(*TestAllType_OneofInt64); ok {
		return x.OneofInt64
	}
	return 0
}

func (x *TestAllType) GetOneofString() string {
	if x, ok := x.GetOneofValue().(*TestAllType_OneofString); ok {
		return x.OneofString
	}
	return ""
}

type isTestAllType_OneofValue interface {
	isTestAllType_OneofValue()
}

type TestAllType_OneofInt32 struct {
	// test
	OneofInt32 int32 `protobuf:"varint,20,opt,name=oneof_int32,json=oneofInt32,proto3,oneof"`
}

type TestAllType_OneofInt64 struct {
	// test
	OneofInt64 int64 `protobuf:"varint,21,opt,name=oneof_int64,json=oneofInt64,proto3,oneof"`
}

type TestAllType_OneofString struct {
	// test
	OneofString string `protobuf:"bytes,22,opt,name=oneof_string,json=oneofString,proto3,oneof"`
}

func (*TestAllType_OneofInt32) isTestAllType_OneofValue() {}

func (*TestAllType_OneofInt64) isTestAllType_OneofValue() {}

func (*TestAllType_OneofString) isTestAllType_OneofValue() {}

// test
type TestAllType_Message struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// test
	String_ string `protobuf:"bytes,1,opt,name=string,proto3" json:"string,omitempty"`
	// test
	Uint32 uint32 `protobuf:"varint,2,opt,name=uint32,proto3" json:"uint32,omitempty"`
}

func (x *TestAllType_Message) Reset() {
	*x = TestAllType_Message{}
	if protoimpl.UnsafeEnabled {
		mi := &file_test_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestAllType_Message) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestAllType_Message) ProtoMessage() {}

func (x *TestAllType_Message) ProtoReflect() protoreflect.Message {
	mi := &file_test_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestAllType_Message.ProtoReflect.Descriptor instead.
func (*TestAllType_Message) Descriptor() ([]byte, []int) {
	return file_test_proto_rawDescGZIP(), []int{0, 1}
}

func (x *TestAllType_Message) GetString_() string {
	if x != nil {
		return x.String_
	}
	return ""
}

func (x *TestAllType_Message) GetUint32() uint32 {
	if x != nil {
		return x.Uint32
	}
	return 0
}

var File_test_proto protoreflect.FileDescriptor

var file_test_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xed, 0x06, 0x0a,
	0x0b, 0x54, 0x65, 0x73, 0x74, 0x41, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x62, 0x6f, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x62, 0x6f, 0x6f, 0x6c,
	0x12, 0x14, 0x0a, 0x05, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x05, 0x62, 0x79, 0x74, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x18, 0x04, 0x20, 0x01, 0x28, 0x07, 0x52,
	0x07, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x69, 0x78, 0x65,
	0x64, 0x36, 0x34, 0x18, 0x05, 0x20, 0x01, 0x28, 0x06, 0x52, 0x07, 0x66, 0x69, 0x78, 0x65, 0x64,
	0x36, 0x34, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x05, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x74, 0x33,
	0x32, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x14,
	0x0a, 0x05, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x69,
	0x6e, 0x74, 0x36, 0x34, 0x12, 0x47, 0x0a, 0x0f, 0x6d, 0x61, 0x70, 0x5f, 0x62, 0x6f, 0x6f, 0x6c,
	0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x54, 0x65, 0x73, 0x74, 0x41, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x4d, 0x61, 0x70, 0x42,
	0x6f, 0x6f, 0x6c, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d,
	0x6d, 0x61, 0x70, 0x42, 0x6f, 0x6f, 0x6c, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x11, 0x52, 0x06, 0x73,
	0x69, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x12, 0x52, 0x06, 0x73, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x1a, 0x0a,
	0x08, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0f, 0x52,
	0x08, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x66, 0x69,
	0x78, 0x65, 0x64, 0x36, 0x34, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x10, 0x52, 0x08, 0x73, 0x66, 0x69,
	0x78, 0x65, 0x64, 0x36, 0x34, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x16, 0x0a,
	0x06, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x75,
	0x69, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x29, 0x0a,
	0x10, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65,
	0x73, 0x18, 0x11, 0x20, 0x03, 0x28, 0x01, 0x52, 0x0f, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x54, 0x65, 0x73, 0x74,
	0x41, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x25, 0x0a, 0x04, 0x65, 0x6e, 0x75, 0x6d,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x41, 0x6c, 0x6c,
	0x54, 0x79, 0x70, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x04, 0x65, 0x6e, 0x75, 0x6d, 0x12,
	0x21, 0x0a, 0x0b, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x0a, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x49, 0x6e, 0x74,
	0x33, 0x32, 0x12, 0x21, 0x0a, 0x0b, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x5f, 0x69, 0x6e, 0x74, 0x36,
	0x34, 0x18, 0x15, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x0a, 0x6f, 0x6e, 0x65, 0x6f, 0x66,
	0x49, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x23, 0x0a, 0x0c, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x5f, 0x73,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x6f,
	0x6e, 0x65, 0x6f, 0x66, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x1a, 0x40, 0x0a, 0x12, 0x4d, 0x61,
	0x70, 0x42, 0x6f, 0x6f, 0x6c, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x39, 0x0a, 0x07,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12,
	0x16, 0x0a, 0x06, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x06, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x22, 0x34, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12,
	0x14, 0x0a, 0x10, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x31, 0x10,
	0x01, 0x12, 0x0a, 0x0a, 0x06, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x32, 0x10, 0x02, 0x42, 0x0d, 0x0a,
	0x0b, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x21, 0x5a, 0x1f,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x72, 0x6f, 0x6e, 0x62, 0x62,
	0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_test_proto_rawDescOnce sync.Once
	file_test_proto_rawDescData = file_test_proto_rawDesc
)

func file_test_proto_rawDescGZIP() []byte {
	file_test_proto_rawDescOnce.Do(func() {
		file_test_proto_rawDescData = protoimpl.X.CompressGZIP(file_test_proto_rawDescData)
	})
	return file_test_proto_rawDescData
}

var file_test_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_test_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_test_proto_goTypes = []interface{}{
	(TestAllType_Enum)(0),       // 0: TestAllType.Enum
	(*TestAllType)(nil),         // 1: TestAllType
	nil,                         // 2: TestAllType.MapBoolStringEntry
	(*TestAllType_Message)(nil), // 3: TestAllType.Message
}
var file_test_proto_depIdxs = []int32{
	2, // 0: TestAllType.map_bool_string:type_name -> TestAllType.MapBoolStringEntry
	3, // 1: TestAllType.message:type_name -> TestAllType.Message
	0, // 2: TestAllType.enum:type_name -> TestAllType.Enum
	3, // [3:3] is the sub-list for method output_type
	3, // [3:3] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_test_proto_init() }
func file_test_proto_init() {
	if File_test_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_test_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestAllType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_test_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestAllType_Message); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_test_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*TestAllType_OneofInt32)(nil),
		(*TestAllType_OneofInt64)(nil),
		(*TestAllType_OneofString)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_test_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_test_proto_goTypes,
		DependencyIndexes: file_test_proto_depIdxs,
		EnumInfos:         file_test_proto_enumTypes,
		MessageInfos:      file_test_proto_msgTypes,
	}.Build()
	File_test_proto = out.File
	file_test_proto_rawDesc = nil
	file_test_proto_goTypes = nil
	file_test_proto_depIdxs = nil
}
